__description__ = \
"""
Function for plotting a species tree.
"""
__author__ = "Michael J. Harms"
__date__ = "2022-05-19"

import topiary
from .base import setup_generic_tree_format, final_render

import ete3


def species_tree(species_tree,
                 output_file=None,
                 fontsize=36,
                 circle_radius=0.0,
                 width=800,space_between_taxa=10,line_width=4):
    """
    Draw a species tree given an ete3 tree, usually generated by
    topiary.get_species_tree.


    Parameters
    ----------
        species_tree: ete3 Tree object holding a species tree
        output_file: output file to write tree. If running in a notebook, will
                     return to notebook and write to this file. If not in a notebook
                     and not specified, will write out species-tree.pdf.
        fontsize: fontsize in points for tip labels
        circle_radius: circle size for internal nodes (fraction of total width)
        value_range: tuple holding minimum and maximum values for support color map.
                     (0,100) means miminum support value is 0, maximum support value
                     is 100. if None, disable node color map.
        R: tuple holding red channel value for lowest support and highest support.
        G: tuple holding green channel value for lowest support and highest support.
        B: tuple holding blue channel value for lowest support and highest support.
        width: width of total tree (pixels)
        space_between_taxa: number of pixels between taxa, sets hight.
        line_width: width of tree lines (pixels)

    Return
    ------
        None or rendered output if in notebook
    """

    T = species_tree.copy()

    # Set up formats (color map for main nodes, tree format (ts) and generic
    # node format (ns)).
    cm, ts, ns = setup_generic_tree_format(num_leaves=len(T.get_leaves()),
                                           width=width,
                                           space_between_taxa=space_between_taxa,
                                           line_width=line_width)

    for n in T.traverse():

        n.set_style(ns)

        if n.is_leaf():

            # Add text for clean name
            n.name = ""
            txt = ete3.TextFace(n.species[0],fsize=fontsize)
            txt.margin_left = 4
            n.add_face(txt,0,position="branch-right")


    return final_render(T,ts,output_file,"species-tree.pdf")
